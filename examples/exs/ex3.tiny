
(import [reactor.core :as r])
(import-js [globals :refer [document]])

(defn foo []
  (def state (r/atom {:count 0}))
  (d/div (d/p "Current count is: " (get @state :count))
              (d/button {:on-click #(swap! state update-in [:count] inc)} "Increment")))

;; Don't do this
(defn foo-mistake []
  (def state (r/atom {:count 0}))
  (d/div (d/p "Current count is: " (get @state :count))
           (d/button {:on-click #(swap! state update-in [:count] inc)} "Increment")))

;; Don't do this
(defn foo-mistake2 []
  (def state (r/atom {:count 0}))
  (d/div (d/p "Current count is: " (get @state :count)) ;; <-- This deref is causing the re-render
           (println "Foo Mistake 2 is being rendered")  ;; <- will print this on-click
           (d/button {:on-click #(swap! state update-in [:count] inc)} "Increment")))

;; Do this
(defn foo-inner-let []
  (def state (r/atom {:count 0})
       count (get @state :count)) ;; let block is inside `render`
  (d/div (d/p "Current count is: " count)
               (d/button {:on-click #(swap! state update-in [:count] inc)} "Increment")))

(defn home []
  (d/div (d/h1 "Foo")
         (foo)
         (d/h1 "Foo Mistake")
         (foo-mistake)
         (d/h1 "Foo Mistake 2")
         (foo-mistake2)
         (d/h1 "Foo Inner Let")
         (foo-inner-let)))

(defn main []
  (r/render [home] document "app"))
