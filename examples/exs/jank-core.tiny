; The layout of this file roughly matches: https://clojure.org/api/cheatsheet

; Namespace management.
(def *ns*)
(def in-ns)

; Relations.
;; Miscellaneous.
(def true?
  (fn* [o]
    (native/raw "__value = #{ o }#->equal(*#{ true }#) ? #{ true }# : #{ false }#")))
(def false?
  (fn* [o]
    (native/raw "__value = #{ o }#->equal(*#{ false }#) ? #{ true }# : #{ false }#")))
(def not
  (fn* [o]
    (native/raw "__value = #{ o }#->equal(*#{ false }#) ? #{ true }# : #{ false }#")))
(def nil?
  (fn* [o]
    (native/raw "__value = (o == JANK_NIL) ? #{ true }# : #{ false }#")))
(def some?
  (fn* [o]
    (native/raw "__value = (o == JANK_NIL) ? #{ false }# : #{ true }#")))

;; Collections.
(def empty?
  (fn* [o]
    (if (nil? o)
      true
      (native/raw "auto const * const seqable(#{ o }#->as_seqable());
                   if(!seqable)
                   { throw #{ :not-seqable }#; }
                   auto const seq(seqable->seq());
                   __value = make_box(seq == nullptr);"))))

(def count
  (fn* [o]
    (if (nil? o)
      0
      ; TODO: Interface for counting without turning into seq first.
      (native/raw "auto const * const seqable(#{ o }#->as_seqable());
                   if(!seqable)
                   { throw #{ :not-seqable }#; }
                   auto const seq(seqable->seq());
                   /* TODO: Unsigned */
                   __value = make_box(runtime::detail::sequence_length(seq));"))))

;; Lists.
(def first
  (fn* [o]
    (native/raw "__value = jank::runtime::first(#{ o }#);")))
(def next
  (fn* [o]
    (native/raw "__value = jank::runtime::next(#{ o }#);")))
(def next-in-place
  (fn* [o]
    (native/raw "__value = jank::runtime::next_in_place(#{ o }#);")))
(def nnext
  (fn* [o]
    (next-in-place (next o))))
(def second
  (fn* [o]
    (first (next o))))
(def rest
  (fn* [o]
    (if (nil? o)
      '()
      (native/raw "auto const * const seqable(#{ o }#->as_seqable());
                   if(!seqable)
                   { throw #{ :not-seqable }#; }
                   auto const seq(seqable->seq());
                   if(!seq)
                   { __value = #{ '() }#; }
                   else
                   {
                    __value = seq->next_in_place();
                    if(__value == nullptr)
                    { __value = #{ '() }#; }
                   }"))))
(def cons
  (fn* [head tail]
    (native/raw "if(auto const seqable_tail = #{ tail }#->as_seqable())
                 { __value = make_box<jank::runtime::obj::cons>(#{ head }#, seqable_tail->seq()); }
                 else if(#{ tail }#->as_nil())
                 { __value = make_box<jank::runtime::obj::cons>(#{ head }#, nullptr); }
                 else
                 { throw #{ [:invalid-cons-tail tail] }#; }")))
(def list
  (fn* [& items]
    (native/raw "auto * const seq(static_cast<behavior::sequence*>(
                                   const_cast<behavior::seqable*>(#{ items }#->as_seqable())));
                 __value = jank::runtime::obj::list::create(seq);")))

;; Vectors.
(def vec
  (fn* [coll]
    (native/raw "auto * const seq(static_cast<behavior::sequence*>(
                                   const_cast<behavior::seqable*>(#{ coll }#->as_seqable())));
                 __value = jank::runtime::obj::vector::create(seq);")))

(def conj)
(def conj
  (fn*
    ([] [])
    ([coll] coll)
    ([coll x]
     (native/raw "__value = jank::runtime::conj(#{ coll }#, #{ x }#);"))
    ([coll x & args]
     (let* [res (conj coll x)]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

;; Strings.
(def string?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_string() != nullptr);")))
(def str
  (fn*
    ([] "")
    ([o]
     (native/raw "__value = make_box(#{ o }#->to_string());"))
    ([o & args]
     (native/raw "fmt::memory_buffer buff;
                  buff.reserve(16);
                  auto * const seq(static_cast<behavior::sequence*>(
                    const_cast<behavior::seqable*>(#{ args }#->as_seqable())));
                  #{ o }#->to_string(buff);
                  seq->first()->to_string(buff);
                  for(auto *it(seq->next_in_place()); it != nullptr; it = it->next_in_place())
                  { it->first()->to_string(buff); }
                  __value = make_box<obj::string>(native_string{ buff.data(), buff.size() });"))))

;; Maps.
(def get
  (fn*
    ([m k]
     (native/raw "__value = jank::runtime::get(#{ m }#, #{ k }#);"))
    ([m k fallback]
     (native/raw "__value = jank::runtime::get(#{ m }#, #{ k }#, #{ fallback }#);"))))

;; Other.
(def hash
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->to_hash());")))

(def assoc)
(def assoc
  (fn*
    ([map key val]
     (native/raw "__value = jank::runtime::assoc(#{ map }#, #{ key }#, #{ val }#);"))
    ([map key val & kvs]
     (let* [res (assoc map key val)]
       (if (empty? kvs)
         res
         (do
           (assert (not (empty? (next kvs)))); "assoc expects even number of args after the first"
           (recur res (first kvs) (second kvs) (nnext kvs))))))))

(def reduce*)
(def reduce*
  (fn*
    ([f coll]
     (let* [s (seq coll)]
       (if s
         (reduce* f (first s) (next s))
         (f))))
    ([f val coll]
     (native/raw "__value = #{ val }#;
                  for(auto it(#{ coll }#->as_seqable()->fresh_seq()); it != nullptr; it = it->next_in_place())
                  { __value = dynamic_call(f, __value, it->first()); }"))))

(def reverse
  (fn* [coll]
    (reduce* conj () coll)))

; Primitives.
;; Arithmetic.
(def +
  (fn*
    ([] 0)
    ([x] x)
    ([l r]
     (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).add();"))
    ([l r & args]
     (let* [res (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).add();")]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

(def -)
(def -
  (fn*
    ([x]
     (- 0 x))
    ([l r]
     (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).subtract();"))
    ([l r & args]
     (let* [res (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).subtract();")]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

(def *
  (fn*
    ([] 1)
    ([x] x)
    ([l r]
     (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).multiply();"))
    ([l r & args]
     (let* [res (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).multiply();")]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

(def /
  (fn*
    ([x]
     (/ 1 x))
    ([l r]
     (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).divide();"))
    ([l r & args]
     (let* [res (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).divide();")]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

(def =
  (fn*
    ([x] true)
    ([l r]
     (native/raw "__value = make_box(#{ l }#->equal(*#{ r }#));"))
    ([l r & args]
     (if (native/raw "__value = make_box(#{ l }#->equal(*#{ r }#));")
       (if (next args)
         (recur r (first args) (next args))
         (native/raw "__value = make_box(#{ r }#->equal(*#{ (first args) }#));"))
       false))))

(def <
  (fn*
    ([x] true)
    ([l r]
     (native/raw "__value = make_box(obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).lt());"))
    ([l r & args]
     (if (native/raw "__value = make_box(obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).lt());")
       (if (next args)
         (recur r (first args) (next args))
         (native/raw "__value = make_box(obj::right_ops(#{ (first args) }#).combine(obj::left_ops(#{ r }#)).lt());"))
       false))))

(def <=
  (fn*
    ([x] true)
    ([l r]
     (native/raw "__value = make_box(obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).lte());"))
    ([l r & args]
     (if (native/raw "__value = make_box(obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).lte());")
       (if (next args)
         (recur r (first args) (next args))
         (native/raw "__value = make_box(obj::right_ops(#{ (first args) }#).combine(obj::left_ops(#{ r }#)).lte());"))
       false))))

(def >
  (fn*
    ([x] true)
    ([l r]
     (native/raw "__value = make_box(obj::right_ops(#{ l }#).combine(obj::left_ops(#{ r }#)).lt());"))
    ([l r & args]
     (if (native/raw "__value = make_box(obj::right_ops(#{ l }#).combine(obj::left_ops(#{ r }#)).lt());")
       (if (next args)
         (recur r (first args) (next args))
         (native/raw "__value = make_box(obj::right_ops(#{ r }#).combine(obj::left_ops(#{ (first args) }#)).lt());"))
       false))))

(def >=
  (fn*
    ([x] true)
    ([l r]
     (native/raw "__value = make_box(obj::right_ops(#{ l }#).combine(obj::left_ops(#{ r }#)).lte());"))
    ([l r & args]
     (if (native/raw "__value = make_box(obj::right_ops(#{ l }#).combine(obj::left_ops(#{ r }#)).lte());")
       (if (next args)
         (recur r (first args) (next args))
         (native/raw "__value = make_box(obj::right_ops(#{ r }#).combine(obj::left_ops(#{ (first args) }#)).lte());"))
       false))))

(def min
  (fn*
    ([x] x)
    ([l r]
     (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).min();"))
    ([l r & args]
     (let* [res (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).min();")]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

(def max
  (fn*
    ([x] x)
    ([l r]
     (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).max();"))
    ([l r & args]
     (let* [res (native/raw "__value = obj::right_ops(#{ r }#).combine(obj::left_ops(#{ l }#)).max();")]
       (if (empty? args)
         res
         (recur res (first args) (next args)))))))

(def inc
  (fn* [n]
    (native/raw "__value = obj::left_ops(#{ n }#).inc();")))
(def dec
  (fn* [n]
    (native/raw "__value = obj::left_ops(#{ n }#).dec();")))

(def pos?
  (fn* [n]
    (native/raw "__value = make_box(obj::left_ops(#{ n }#).is_positive());")))
(def neg?
  (fn* [n]
    (native/raw "__value = make_box(obj::left_ops(#{ n }#).is_negative());")))
(def zero?
  (fn* [n]
    (native/raw "__value = make_box(obj::left_ops(#{ n }#).is_zero());")))

(def rem
  (fn* [num div]
    (native/raw "__value = obj::right_ops(#{ div }#).combine(obj::left_ops(#{ num }#)).remainder();")))
(def mod
  (fn* [num div]
    (let* [m (rem num div)]
      ; TODO: Could use an or here, if we had it.
      (if (zero? m)
        m
        (if (= (pos? num) (pos? div))
          m
          (+ m div))))))

;; Numbers.
(def integer?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_integer() != nullptr)")))
(def float?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_real() != nullptr)")))
(def boolean?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_boolean() != nullptr)")))
(def number?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_number() != nullptr)")))

(def int
  (fn* [o]
    (native/raw "auto const * const n(#{ o }#->as_number());
                 if(!n)
                 { throw #{ :not-a-number }#; }
                 __value = make_box(n->get_integer());")))
(def float
  (fn* [o]
    (native/raw "auto const * const n(#{ o }#->as_number());
                 if(!n)
                 { throw #{ :not-a-number }#; }
                 __value = make_box(n->get_real());")))

(def even?
  (fn* [o]
    (if (integer? o)
      (native/raw "__value = make_box(#{ o }#->as_integer()->data % 2 == 0)")
      ; TODO: throw an error
      false)))
(def odd?
  (fn* [o]
    (if (integer? o)
      (native/raw "__value = make_box(#{ o }#->as_integer()->data % 2 == 1)")
      ; TODO: throw an error
      false)))

; Random.
(def rand
  (fn*
    ([]
     (native/raw "__value = make_box(jank::runtime::obj::rand());"))
    ([n]
     (* (rand) n))))

; Keywords.
(def keyword?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_keyword() != nullptr)")))
(def simple-keyword?
  (fn* [o]
    (native/raw "auto const * const k(#{ o }#->as_keyword());
                 __value = make_box(k != nullptr && k->sym.ns.empty())")))
(def qualified-keyword?
  (fn* [o]
    (native/raw "auto const * const k(#{ o }#->as_keyword());
                 __value = make_box(k != nullptr && !k->sym.ns.empty())")))
(def simple-symbol?
  (fn* [o]
    (native/raw "auto const * const sym(#{ o }#->as_symbol());
                 __value = make_box(sym != nullptr && sym->ns.empty())")))
(def qualified-symbol?
  (fn* [o]
    (native/raw "auto const * const sym(#{ o }#->as_symbol());
                 __value = make_box(sym != nullptr && !sym->ns.empty())")))
(def symbol?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_symbol() != nullptr)")))

; Sequences.

(def iterate
  (fn*
    [f x]
    (native/raw "auto callable(#{ f }#->as_callable());
                 if(!callable)
                 { throw #{ :not-callable }#; }
                 __value = make_box<obj::iterator>(const_cast<behavior::callable*>(callable), #{ x }#);")))

(def range
  (fn*
    ([]
     (iterate inc 0))
    ([end]
     (native/raw "__value = make_box<obj::range>(#{ end }#);"))
    ([start end]
     (native/raw "__value = make_box<obj::range>(#{ start }#, #{ end }#);"))
    ([start end step]
     (native/raw "__value = make_box<obj::range>(#{ start }#, #{ end }#, #{ step }#);"))))

(def take
  (fn*
    ; TODO: Transducer.
    ([n])
    ([n coll]
     ; TODO: Lazy version once we have lazy-seq.
     (let* [take* (fn* [n coll acc]
                    (if (zero? n)
                      acc
                      (if (empty? coll)
                        acc
                        (recur (dec n) (next coll) (conj acc (first coll))))))]
       (take* n coll [])))))

; TODO: Higher arities. Needs clojure.core/spread, which needs clojure.core/cons.
(def apply
  (fn* [f args]
    (native/raw "auto const * const c(#{ f }#->as_callable());
                 if(!c)
                 { throw #{ :not-callable }#; }
                 __value = jank::runtime::apply_to(#{ f }#, #{ args }#);")))

; Input/output.
(def print
  (fn* [o]
    (native/raw "__value = jank::runtime::context::print(#{ o }#);")))
(def println
  (fn* [& args]
    ; TODO: Move println back into here once I sort out two things:
    ; 1. Escaped strings, so I can do the space in between each
    ; 2. The linker errors showing up when using fmt::format_to here
    (native/raw "__value = jank::runtime::context::println(#{ args }#->as_seqable());")))

; Functions.
(def ifn?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_callable() != nullptr)")))
(def fn?
  (fn* [o]
    (native/raw "__value = make_box(#{ o }#->as_function() != nullptr)")))

; Miscellaneous.
; TODO: This should be a macro.
(def assert)

; Metadata
(def meta
  (fn* [o]
    (native/raw "auto const * const md(#{ o }#->as_metadatable());
                 if(md == nullptr || md->meta.is_none())
                 { __value = #{ nil }#; }
                 else
                 { __value = md->meta.unwrap(); }")))
(def with-meta
  (fn* [o m]
    (native/raw "auto const * const md(#{ o }#->as_metadatable());
                 // TODO: Standard exception handling.
                 if(md == nullptr)
                 { throw #{ :not-metadatable }#; }
                 __value = md->with_meta(#{ m }#);")))
(def reset-meta!
  (fn* [o m]
    (native/raw "auto const * const md(#{ o }#->as_metadatable());
                 // TODO: Standard exception handling.
                 if(md == nullptr)
                 { throw #{ :not-metadatable }#; }
                 auto const meta(behavior::metadatable::validate_meta(#{ m }#));
                 const_cast<behavior::metadatable*>(md)->meta = meta;
                 __value = #{ m }#;")))

; Macros.
(def defn
  (fn* [&form &env fn-name fn-args & body]
    (list 'do
          ; TODO: Remove this once fn* supports naming.
          (list 'def fn-name)
          (list 'def fn-name (cons 'fn* (cons fn-name (cons fn-args body)))))))
(reset-meta! (var defn) {:macro true})

(defn defmacro [&form &env fn-name fn-args & body]
  (list 'do
        (list 'def fn-name (cons 'fn* (cons (vec (cons '&form (cons '&env fn-args))) body)))
        (list 'reset-meta! (list 'var fn-name) {:macro true})))
(reset-meta! (var defmacro) {:macro true})

(defmacro when [condition & body]
  (list 'if condition
        (cons 'do body)
        nil))

(defmacro fn [args & body]
  (cons 'fn* (cons args body)))

(defmacro let [args & body]
  (cons 'let* (cons args body)))

(defn macroexpand-1 [form]
  (native/raw "__value = __rt_ctx.macroexpand1(#{ form }#);"))
(defn macroexpand [form]
  (native/raw "__value = __rt_ctx.macroexpand(#{ form }#);"))

;; jank.compiler things.
(def benchmark
  ; TODO: Options, following what criterium offers.
  (fn [label fun]
    (native/raw "auto const * const label_str(#{ (str label) }#->as_string());
                 auto const * const callable(#{ fun }#->as_callable());
                 if(!callable)
                 { throw #{ :not-callable }#; }

                 ankerl::nanobench::Config config;
                 //config.mTimeUnit = std::chrono::milliseconds{ 1 };
                 //config.mTimeUnitName = TODO
                 config.mMinEpochIterations = 500;
                 config.mOut = &std::cout;
                 config.mWarmup = 300;

                 ankerl::nanobench::Bench().config(config).run
                 (
                  static_cast<std::string>(label_str->data),
                  [&]
                  {
                    object_ptr res{ callable->call() };
                    ankerl::nanobench::doNotOptimizeAway(res);
                  }
                 );")))

;; Extra things that usually come from Java.
(defn tan [o]
  (native/raw "auto const n(#{ o }#->as_number());
               if(!n)
               { throw #{ :not-a-number }#; }
               __value = make_box(std::tan(n->get_real()));"))

(defn sqrt [o]
  (native/raw "auto const n(#{ o }#->as_number());
               if(!n)
               { throw #{ :not-a-number }#; }
               __value = make_box(std::sqrt(n->get_real()));"))

(defn abs [o]
  (native/raw "__value = obj::left_ops(#{ o }#).abs();"))

(defn pow [x y]
  (native/raw "auto const l(#{ x }#->as_number());
               if(!l)
               { throw #{ :not-a-number }#; }
               auto const r(#{ y }#->as_number());
               if(!r)
               { throw #{ :not-a-number }#; }
               __value = make_box(std::pow(l->get_real(), r->get_real()));"))
