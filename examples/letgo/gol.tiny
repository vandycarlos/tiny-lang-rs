;
; Copyright (c) 2022 Marcin Gasperowicz <xnooga@gmail.com>
; SPDX-License-Identifier: MIT
;

;; This example prints 20 iterations of Conway's Game of Life in your terminal
;; 
;; Usage: let-go gol.lg

(def N 10)
(def initial [0 0 0 0 0 0 0 0 0 0
              0 0 1 0 0 0 0 0 0 0
              0 0 0 1 0 0 0 0 0 0
              0 1 1 1 0 0 0 0 0 0
              0 0 0 0 0 0 0 0 0 0
              0 0 0 0 0 0 0 0 0 0
              0 0 0 0 0 0 0 0 0 0
              0 0 0 0 0 0 0 0 0 0
              0 0 0 0 0 0 0 0 0 0
              0 0 0 0 0 0 0 0 0 0])

(defn show [state]
  (let loop [[l & r] (partition N N state)]
    (when l
      (apply println (map {0 "." 1 "#"} l))
      (loop r))))

(defn window [state i]
  (apply + (map #(get state %1 0)
                [(- i N 1)  (- i N) (- i N -1)
                 (dec i)    (inc i)
                 (+ i N -1) (+ i N) (+ i N 1)])))

(defn step [state]
  (mapv (fn [x i]
          (let [n (window state i)]
            (cond (and (= x 1) (< n 2)) 0
                  (and (= x 1) (> n 3)) 0
                  (and (= x 0) (= n 3)) 1
                  x)))
        state
        (range (* N N))))

(defn main []
  (let loop [state initial i 20]
    (when (> i 0)
      (show state)
      (println "---")
      (loop (step state) (dec i)))))
