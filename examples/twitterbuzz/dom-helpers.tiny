; Copyright (c) Rich Hickey. All rights reserved.
; The use and distribution terms for this software are covered by the
; Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
; which can be found in the file epl-v10.html at the root of this distribution.
; By using this software in any fashion, you are agreeing to be bound by
; the terms of this license.
; You must not remove this notice, or any other, from this software.

(import [goog/goog.dom :as dom]
        [lib.string :as string])

;;; Return the element with the passed id.
(defn get-element [id]
  (dom/getElement (name id)))

;;; Append all children to parent
(defn append [parent & children]
  (do (doseq [child children]
        (dom/appendChild parent child))
      parent))

;;; Set the text content for the passed element returning the
;;; element. If a keyword is passed in the place of e, the element with
;;; that id will be used and returned.
(defn set-text [e s]
  (let [e (if (keyword? e) (get-element e) e)]
    (doto e (dom/setTextContent s))))

(defn normalize-args [tag args]
  (let [parts (string/split (name tag) #rx"(\\.|#)")
        [tag attrs] [(first parts)
                     (apply hash-map (map #(cond (= % ".") :class
                                                 (= % "#") :id
                                                 %)
                                          (rest parts)))]]
    (if (map? (first args))
      [tag (merge attrs (first args)) (rest args)]
      [tag attrs args])))

;;; Create a dom element using a keyword for the element name and a map
;;; for the attributes. Append all children to parent. If the first
;;; child is a string then the string will be set as the text content of
;;; the parent and all remaining children will be appended.
(defn element [tag & args]
  (let [[tag attrs children] (normalize-args tag args)
        parent (dom/createDom (name tag)
                              (reduce (fn [o [k v]]
                                        (aset o k v))
                                      (js-obj)
                                      (map #(vector (name %1) %2)
                                           (keys attrs)
                                           (vals attrs))))
        [parent children] (if (string? (first children))
                            [(set-text (element tag attrs) (first children))
                             (rest children)]
                            [parent children])]
    (apply append parent children)))

;;; Remove all children from the element with the passed id.
(defn remove-children [id]
  (let [parent (dom/getElement (name id))]
    (do (dom/removeChildren parent))))

;;; Create a dom element from an html string.
(defn html [s]
  (dom/htmlToDocumentFragment s))

(defn- element-arg? [x]
  (or (keyword? x)
      (map? x)
      (string? x)))

;;; Build up a dom element from nested vectors.
(defn build [x]
  (if (vector? x)
    (let [[parent children] (if (keyword? (first x))
                              [(apply element (take-while element-arg? x))
                               (drop-while element-arg? x)]
                              [(first x) (rest x)])
          children (map build children)]
      (apply append parent children))
    x))

;;; Insert a child element at a specific location.
(defn insert-at [parent child index]
  (dom/insertChildAt parent child index))
